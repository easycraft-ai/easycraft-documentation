"use strict";(self.webpackChunkeasycraft_documentation=self.webpackChunkeasycraft_documentation||[]).push([[435],{27072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"integration-platform/4/4.2.1-interface-declaration-creation","title":"4.2.1-interface-declaration-creation","description":"4.2.1 Interface Declaration Creation","source":"@site/docs/integration-platform/4/4.2.1-interface-declaration-creation.md","sourceDirName":"integration-platform/4","slug":"/integration-platform/4/4.2.1-interface-declaration-creation","permalink":"/docs/integration-platform/4/4.2.1-interface-declaration-creation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/integration-platform/4/4.2.1-interface-declaration-creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.2-interface-declaration","permalink":"/docs/integration-platform/4/4.2-interface-declaration"},"next":{"title":"4.2.2-interface-declaration-modification","permalink":"/docs/integration-platform/4/4.2.2-interface-declaration-modification"}}');var i=n(74848),s=n(28453);const a={},o=void 0,l={},c=[{value:"4.2.1 Interface Declaration Creation",id:"421-interface-declaration-creation",level:3},{value:"4.2.1.1 SOAP Protocol",id:"4211-soap-protocol",level:4},{value:"4.2.1.2 JDBC Protocol",id:"4212-jdbc-protocol",level:4},{value:"4.2.1.3 REST Protocol",id:"4213-rest-protocol",level:4}];function d(e){const t={h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"421-interface-declaration-creation",children:"4.2.1 Interface Declaration Creation"}),"\n",(0,i.jsx)(t.h4,{id:"4211-soap-protocol",children:"4.2.1.1 SOAP Protocol"}),"\n",(0,i.jsx)(t.p,{children:"Before registering an interface of the SOAP protocol, the prerequisites are to create SOAP connection service and provide correct protocol address, namely the WSDL address. Thus, the interface can be combined with the service address in the connection service to form the complete address content."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Process of Registering SOAP Protocol Interface"}),": Integration Platform -> Third-party Interface -> Interface Declaration -> Create -> SOAP"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Configuration Instructions:"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Basic Information:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Interface Name"}),": Name of the registered interface. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Service"}),": Select from the pull-down list, select the SOAP connection service created in Third-party Interface-Interface Declaration. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Status"}),": Enabled by default. The interface will be unavailable if disabled."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Function Identifier"}),": Can be both manually or auto-filled. Only letters, numbers, and underscores are allowed, 6-32 characters. Required. This identifier is mainly used for other applications to call. For example, when the JS panel of a low-code platform calls, this function identifier will be used)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Usage Scenario"}),": Select in the pull-down list (Fetch: e.g., query; Write in: e.g., create, modify, delete). Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cache Duration"}),': Set the cache duration. This option is required when the Usage Scenario is "Fetch".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Capability"}),': Used to mark which applications use this interface, making it easier to quickly locate the corresponding interface within applications. Select in the pull-down list. Optional. Application scenarios are as follows (Taking Process Integration as example):\r\na. First, configure the corresponding capability in the interface declaration, such as setting the interface name as "Acquisite Form" and the capability to "Process Integration - Form Field Value Acquisite Interface"\r\nb. In Process Platform-Process Integration-Form Integration-Interface Settings-Form Acquisite Interface, creator can locate the corresponding interface quickly.']}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Function Details:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"WSDL Address"}),": The description of the web service address to which the interface belongs. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Details"}),': Click "Acquisite Interface Details" to verify whether the address is valid and acquisite the list of interfaces under the service based on the current WSDL address. The interface information is displayed in the binding function pull-down list for selection.']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Binding Function"}),": Select the interface provided by the web service in the pull-down list."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Response Timeout"}),": Set the time for calling the interface."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pagination Query"}),': Disabled by default, and can be enabled manually (Paginated Query cannot be enabled when the usage scenario is "Write in").']}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Request Parameter Settings"}),": Automatically filled in when a binding function is selected and cannot be edited."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Returned Parameter Settings"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mapping Template"}),": Automatically filled in when a binding function is selected and cannot be edited."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mock Data"}),": To customize the returned parameters, and are mainly used to temporarily configure mock data when the back-end interface is not yet developed but the front-end needs to call it for joint debugging."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Error Parameter Settings"}),": Automatically filled in when a binding function is selected and cannot be edited."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Call Rule"}),": Determines whether users can call this interface during runtime of the application using this interface. Disabled by default (When disabled, no users can call this interface during runtime)."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Users"}),": Refers to users who have permission to call this interface when the application or form is running. Required. Users can be designated as individuals, departments, institutions, groups, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Remarks"}),": Remarks of registering interface declaration."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"4212-jdbc-protocol",children:"4.2.1.2 JDBC Protocol"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Prerequisites for Registering A JDBC Protocol Interface"}),": Create a JDBC connection service."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Process of Registering A JDBC Protocol Interface"}),": Integration Platform -> Third-party Interfaces -> Interface Declaration -> Create -> JDBC"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Configuration Instructions:"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Basic Information:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Interface Name"}),": Name of the registered interface. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Service"}),": Select from the pull-down list, select the JDBC connection service created in Third-party Interface-Connection Service. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Status"}),": Enabled by default. The interface will be unavailable if disabled."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Function Identifier"}),": Can be both manually or auto-filled. Only letters, numbers, and underscores are allowed, 6-32 characters. Required. (This identifier is mainly used when other applications call this interface.)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Usage Scenario"}),": Select in the pull-down list. (Fetch: e.g., query; Write in: e.g., create, modify, delete). Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cache Duration"}),': Set the cache duration. This option is required when the Usage Scenario is "Fetch".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Capability"}),": Used to mark which applications use this interface, making it easier to quickly locate the corresponding interface in applications. Select in the pull-down list. Optional."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Function Details:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pagination Query"}),': Disabled by default, can be enabled manually (Cannot be enabled when the Usage Scenario is "Write in"; Can be enabled when the Usage Scenario is "Fetch").']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Script Type"}),": Supports both General SQL and Stored Procedure."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"General SQL Statement"}),": Input the SQL statement to be executed. Required."]}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"left"},children:(0,i.jsx)("img",{src:"/img/SOAP Protocol.png",alt:"Portal Diagram",width:"800"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Request Parameter Settings"}),': Request parameter can be left empty and is empty by default. Users can determine whether to configure request parameters according to actual needs. Request parameter should be Simple types+Object+Array. Other types are not supported. Object is allowed to contain array type property in the configuration. When setting the parameter, pay attention to the following points:\r\n(1) The parameterized SQL statement is based on OGNL expression, and must comply with MyBatis syntax rules.\r\n(2) All dynamic parameters must be added with the common alias "p", which stands for parameter.\r\n(3) The parameter path in SQL must match the request parameter property path defined in the JDBC interface declaration.\r\n(4) Input parameters can be left empty. The input parameters must match the names and data types of the input parameters referenced in the dynamic SQL when they are not empty.\r\n(5) Parameters can have custom aliases. Chinese aliases are not supported.']}),"\n",(0,i.jsx)(t.p,{children:"Take query SQL as an example, the configuration is as follows:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Returned Parameter Settings"}),': After executing the SQL statement, the returned results can be parameterized according to actual need. Left empty by default. Pay attention to the following when setting parameters:\r\n(1) The parameter name must be the name included in the corresponding table of the current SQL statement.\r\n(2) When the Usage Scenario is "Fetch", users can set the returned result to be a single record or multiple records. When the Usage Scenario is "Write in" and the returned results contains only one field, the returned data type can be set according to the field type, such as character, number, or date.\r\n(3) When the returned data is in list format or pagination is enabled, only the multiple records option can be matched.']}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Single Record"}),": The query result returns only one record, and the returned datum is an object type."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Records"}),": The query results return all matching records, and the returned data are in list format."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Add Parameters"}),": After selecting a single record or multiple records, set the returned parameter fields."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Extract Parameters"}),": The extracted SQL must be parameter-free. After extraction, the output parameter fields in the SQL will be displayed in the returned parameters. Due to slight differences between the field types in the data and Java types, creator can manually adjust the field types of the returned parameters after extraction."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Call Rule"}),": Determines whether users can call this interface during runtime of the application using this interface. Disabled by default (No users can call the interface during runtime if it is disabled)."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Users"}),": Refers to users who have permission to call this interface when the application or form is running. Required. Users can be designated as individuals, departments, institutions, groups, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Remarks"}),": Remarks of registering interface declaration"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Stored Procedure"}),": Input the stored procedure statement to be executed. Required."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Request Parameter Settings"}),': Request parameters can be left empty and are empty by default. Users can determine whether to configure request parameters according to the actual need. Request parameter should be Simple types+Object+Array. Other types are not supported. Object is allowed to contain array type property in the configuration. When setting the parameter, pay attention to the following points:\r\n(1) The parameterized stored procedure statements are based on OGNL expression and must comply with MyBatis syntax rules.\r\n(2) All dynamic parameters must be added with the common alias "p", which stands for parameter.\r\n(3) The parameter path in SQL must match the request parameter property path defined in the JDBC interface declaration.\r\n(4) Input parameters can be left empty. The input parameters must match the names and data types of the input parameters referenced in the dynamic SQL when they are not empty.\r\n(5) Parameters can have custom aliases. Chinese aliases are not supported.']}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Returned Parameter Settings"}),': After executing the stored procedure statement, users can parameterize the returned parameters according to the actual need. Left empty by default. Pay attention to the following when setting parameters:\r\n(1) The parameter name must be the name included in the corresponding table of the current SQL statement.\r\n(2) When the Usage Scenario is "Fetch", users can set the returned result to be a single record or multiple records. When the Usage Scenario is "Write in" and the returned results contains only one field, the returned data type can be set according to the field type, such as character, number, or date.\r\n(3) When the returned data is in list format or pagination is enabled, only the multiple records option can be matched.']}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Single Record"}),": The query result returns only one record, and the returned data is an object type."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Records"}),": The query results return all matching records, and the returned data is in list format."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Add Parameters"}),": After selecting a single record or multiple records, set the returned parameter fields."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Extract Parameters"}),": The extracted SQL must be parameter-free. After extraction, the output parameter fields in the SQL will be displayed in the returned parameters. Due to slight differences between the field types in the data and Java types, creator can manually adjust the field types of the returned parameters after extraction."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Call Rule"}),": Determines whether users can call this interface during runtime of the application using this interface. Disabled by default (No users can call the interface during runtime if it is disabled)."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Users"}),": Refers to users who have permission to call this interface when the application or form is running. Required. Users can be designated as individuals, departments, institutions, groups, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Remarks"}),": Remarks of registering interface declaration"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"4213-rest-protocol",children:"4.2.1.3 REST Protocol"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Prerequisites for Registering A REST Protocol Interface"}),": Create a REST connection service and provide the correct REST interface address."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Process of Registering REST Protocol Interface"}),": Integration Platform -> Third-party Interface -> Interface Declaration -> Create -> REST"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Configuration Instructions:"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Basic Information:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Interface Name"}),": Name of the registered interface. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Service"}),': Select from the pull-down list, select the REST connection service created in "Third-party Interface-Connection Service". Required.']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Status"}),": Enabled by default. The interface will be unavailable if disabled."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Function Identifier"}),": Can be both manually or auto-filled. Only letters, numbers, and underscores are allowed, 6-32 characters. Required. (This identifier is mainly used when other applications call this interface.)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Usage Scenario"}),": Select in the pull-down list. (Fetch: e.g., query; Write in: e.g., create, modify, delete). Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cache Duration"}),': Set the cache duration. This option is required when the usage scenario is "Fetch".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Capability"}),": Used to mark which applications use this interface, making it easier to quickly locate the corresponding interface within applications. Select in the pull-down list. Optional."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Function Details:"})}),"\n",(0,i.jsx)("div",{style:{display:"flex",justifyContent:"left"},children:(0,i.jsx)("img",{src:"/img/REST Protocol.png",alt:"Portal Diagram",width:"800"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Request method"}),": Different request methods result in different request parameter settings. The parameter settings supported by various request methods are as follows:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"POST (Acquisite input parameters only from Body): Only supports setting Body parameters."}),"\n",(0,i.jsx)(t.li,{children:"POST (Mixed input parameters): Supports setting Body parameters, URL parameters, and Header parameters."}),"\n",(0,i.jsx)(t.li,{children:"POST (No input parameters): Does not support setting custom parameter."}),"\n",(0,i.jsx)(t.li,{children:"GET (Input parameters only from Query): Only supports setting URL parameter."}),"\n",(0,i.jsx)(t.li,{children:"GET (Mixed input parameters): Supports setting URL and Header parameters."}),"\n",(0,i.jsx)(t.li,{children:"GET (No input parameters): Does not support setting custom parameter."}),"\n"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Request Path"}),": Input the current interface path or the URL path where the interface is located, then combine it with the service address in the connection service to assemble the complete address content."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pagination Query"}),': Disabled by default, can be enabled manually (Cannot be enabled if the Usage Scenario is "Write in"; Can be enabled if the Usage Scenario is "Fetch").']}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Request Parameter Settings"}),": When setting Body parameters for a POST request, the parameter format can be set to either Form format or JSON format."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Form"}),": Parameters can be set as basic type+array type."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"JSON"}),": Parameters can be set as any type."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Extract Parameters"}),": Parameters extraction is designed to acquisite interface returned parameters in a convenient and quick way. The data format for extracted parameters must be JSON. This function serves only as an auxiliary tool and cannot guarantee that every field matches the corresponding data type of the interface returned parameters."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Response Parameter Settings"}),": Set returned parameters in accordance with the results returned by the interfaces. Left empty by default."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Error Settings Handling"}),": Set the format of the error message returned by the interface. Left empty by default."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Call Rule"}),": Determines whether users can call this interface during runtime of this application. Disabled by default. (No users can call the interface during runtime if disabled)."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Users"}),": Refers to users who have permission to call this interface when the application or form is running. Required. Users can be designated as individuals, departments, organizations, groups, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Remarks"}),": Remarks for registering interface declaration"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);